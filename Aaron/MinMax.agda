open import Relation using (_‚â°_; inspect; _with‚â°_; reflexive; transitive; total)
open import Bool

module MinMax (A : Set) (_‚â§A_ : A ‚Üí A ‚Üí ùîπ)
              (‚â§-refl : reflexive _‚â§A_)
              (‚â§-trans : transitive _‚â§A_)
              (‚â§-total : total _‚â§A_) where


min : A ‚Üí A ‚Üí A
min a b = if a ‚â§A b then a else b

max : A ‚Üí A ‚Üí A
max a b = if a ‚â§A b then b else a

min-‚â§1 : ‚àÄ {x y} ‚Üí min x y ‚â§A x ‚â° ‚ä§
min-‚â§1 {x} {y} with inspect (x ‚â§A y)
min-‚â§1 {x} {y} | ‚ä§ with‚â° p rewrite p = ‚â§-refl
min-‚â§1 {x} {y} | ‚ä• with‚â° p rewrite p = ‚â§-total p

min-‚â§2 : ‚àÄ {x y} ‚Üí min x y ‚â§A y ‚â° ‚ä§
min-‚â§2 {x} {y} with inspect (x ‚â§A y)
min-‚â§2 {x} {y} | ‚ä§ with‚â° p rewrite p = p
min-‚â§2 {x} {y} | ‚ä• with‚â° p rewrite p = ‚â§-refl

max-‚â§1 : ‚àÄ {x y} ‚Üí x ‚â§A max x y ‚â° ‚ä§
max-‚â§1 {x} {y} with inspect (x ‚â§A y)
max-‚â§1 {x} {y} | ‚ä§ with‚â° p rewrite p = p
max-‚â§1 {x} {y} | ‚ä• with‚â° p rewrite p = ‚â§-refl

max-‚â§2 : ‚àÄ {x y} ‚Üí y ‚â§A max x y ‚â° ‚ä§
max-‚â§2 {x} {y} with inspect (x ‚â§A y)
max-‚â§2 {x} {y} | ‚ä§ with‚â° p rewrite p = ‚â§-refl
max-‚â§2 {x} {y} | ‚ä• with‚â° p rewrite p = ‚â§-total p

min-mono : ‚àÄ {x y y'} ‚Üí y ‚â§A y' ‚â° ‚ä§ ‚Üí (min x y ‚â§A min x y') ‚â° ‚ä§
min-mono {x} {y} {y'} p with inspect (x ‚â§A y) | inspect (x ‚â§A y')
min-mono {x} {y} {y'} p | ‚ä§ with‚â° p‚ÇÅ | ‚ä§ with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = ‚â§-refl
min-mono {x} {y} {y'} p | ‚ä§ with‚â° p‚ÇÅ | ‚ä• with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = ‚â§-trans p‚ÇÅ p
min-mono {x} {y} {y'} p | ‚ä• with‚â° p‚ÇÅ | ‚ä§ with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = ‚â§-total p‚ÇÅ
min-mono {x} {y} {y'} p | ‚ä• with‚â° p‚ÇÅ | ‚ä• with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = p

max-mono : ‚àÄ {x y y'} ‚Üí y ‚â§A y' ‚â° ‚ä§ ‚Üí (max x y ‚â§A max x y') ‚â° ‚ä§
max-mono {x} {y} {y'} p with inspect (x ‚â§A y) | inspect (x ‚â§A y')
max-mono {x} {y} {y'} p | ‚ä§ with‚â° p‚ÇÅ | ‚ä§ with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = p
max-mono {x} {y} {y'} p | ‚ä§ with‚â° p‚ÇÅ | ‚ä• with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = ‚â§-trans p (‚â§-total p‚ÇÇ)
max-mono {x} {y} {y'} p | ‚ä• with‚â° p‚ÇÅ | ‚ä§ with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = p‚ÇÇ
max-mono {x} {y} {y'} p | ‚ä• with‚â° p‚ÇÅ | ‚ä• with‚â° p‚ÇÇ rewrite p‚ÇÅ | p‚ÇÇ = ‚â§-refl
