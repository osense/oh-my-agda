module Combinators where

open import Relation using (_‚â°_; refl; ‚àß-elim‚ÇÅ; ‚àß-elim‚ÇÇ)
open import Nat using (‚Ñï; suc; _+_; _>_; <-trans; <-mono‚ÇÇ; <-mono‚ÇÇ'; <-suc+; <-suc)
open import Bool using (ùîπ; ‚ä§; ‚ä•; _‚àß_)


data Comb : Set where
  S K : Comb
  _‚ãÖ_  : Comb ‚Üí Comb ‚Üí Comb
infixl 10 _‚ãÖ_

data _‚Üù_ : Comb ‚Üí Comb ‚Üí Set where
  ‚ÜùK     : (a b : Comb) ‚Üí (K ‚ãÖ a ‚ãÖ b) ‚Üù a
  ‚ÜùS     : (a b c : Comb) ‚Üí (S ‚ãÖ a ‚ãÖ b ‚ãÖ c) ‚Üù (a ‚ãÖ c) ‚ãÖ (b ‚ãÖ c)
  ‚ÜùCong‚ÇÅ : {a a' : Comb} ‚Üí (b : Comb) ‚Üí a ‚Üù a' ‚Üí (a ‚ãÖ b) ‚Üù (a' ‚ãÖ b)
  ‚ÜùCong‚ÇÇ : (a : Comb) ‚Üí {b b' : Comb} ‚Üí b ‚Üù b' ‚Üí (a ‚ãÖ b) ‚Üù (a ‚ãÖ b')
infixl 5 _‚Üù_


size : Comb ‚Üí ‚Ñï
size S = 1
size K = 1
size (a ‚ãÖ b) = suc (size a + size b)

Sfree : Comb ‚Üí ùîπ
Sfree S = ‚ä•
Sfree K = ‚ä§
Sfree (a ‚ãÖ b) = Sfree a ‚àß Sfree b


Sfree-‚Üù-size< : ‚àÄ {a b} ‚Üí Sfree a ‚â° ‚ä§ ‚Üí a ‚Üù b ‚Üí size a > size b ‚â° ‚ä§
Sfree-‚Üù-size< f (‚ÜùK a b) = <-trans {size a} {suc (suc (size a + size b))} {suc (suc (suc (size a + size b)))} (<-trans {size a} {suc (size a + size b)} {suc (suc (size a + size b))} (<-suc+ {size a} {size b}) (<-suc {size a + size b})) (<-suc {size a + size b}) -- lol
Sfree-‚Üù-size< () (‚ÜùS a b c)
Sfree-‚Üù-size< f (‚ÜùCong‚ÇÅ {a} {a'} b p) = <-mono‚ÇÇ {size a} {size a'} {size b} (Sfree-‚Üù-size< (‚àß-elim‚ÇÅ f) p)
Sfree-‚Üù-size< f (‚ÜùCong‚ÇÇ a {b} {b'} p) = <-mono‚ÇÇ' {size b} {size b'} {size a} (Sfree-‚Üù-size< (‚àß-elim‚ÇÇ {Sfree a} {Sfree b} f) p)
